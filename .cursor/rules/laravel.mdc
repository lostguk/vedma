---
description: 
globs: 
alwaysApply: true
---
# Руководство по разработке на Laravel/PHP

## Введение
Данное руководство описывает стандарты и лучшие практики разработки с использованием Laravel, PHP, Docker, Filament, Swagger и сопутствующих веб-технологий.

## Основные принципы
- Писать лаконичные, технические ответы с точными примерами PHP/Laravel
- Придерживаться принципов SOLID в объектно-ориентированном программировании и чистой архитектуре
- Следовать лучшим практикам PHP и Laravel, обеспечивая согласованность и читаемость кода
- Проектировать с учетом масштабируемости и сопровождаемости, обеспечивая легкость расширения системы
- Предпочитать итеративный подход и модуляризацию вместо дублирования для содействия повторному использованию кода
- Использовать последовательные и наглядные имена для переменных, методов и классов для улучшения читаемости
- Пытаться писать код как можно короче
- При написании консольных команд мы всегда учитываем Docker

## Зависимости
- Composer для управления зависимостями
- PHP 8.3+
- Laravel 11.0+
- Filament
- ide-helper
- Swagger
- Docker

## Стандарты PHP и Laravel
- Использовать возможности PHP 8.3+ когда это уместно (например, типизированные свойства, match-выражения)
- Соблюдать стандарты кодирования PSR-12 для согласованного стиля кода
- Всегда использовать строгую типизацию: `declare(strict_types=1);`
- Применять встроенные функции и хелперы Laravel для максимальной эффективности
- Следовать структуре каталогов Laravel и соглашениям об именовании файлов
- Реализовать надежную обработку ошибок и логирование:
  - Использовать механизмы обработки исключений и логирования Laravel
  - Создавать пользовательские исключения при необходимости
  - Применять блоки try-catch для ожидаемых исключений
- Использовать функции валидации Laravel для данных форм и запросов
- Реализовать middleware для фильтрации и модификации запросов
- Использовать Laravel Eloquent ORM для взаимодействия с базой данных
- Использовать конструктор запросов Laravel для сложных операций с базами данных
- Создавать и поддерживать правильные миграции и сидеры баз данных

## Лучшие практики Laravel
- Использовать Eloquent ORM и Query Builder вместо необработанных SQL-запросов, когда это возможно
- Реализовать паттерны Repository и Service для лучшей организации кода и повторного использования
- Использовать встроенные функции аутентификации и авторизации Laravel (Sanctum, Policies)
- Использовать механизмы кэширования Laravel (Redis, Memcached) для повышения производительности
- Использовать очереди задач и Laravel Horizon для обработки долгосрочных задач и фоновой обработки
- Реализовать комплексное тестирование с использованием PHPUnit и Laravel Dusk для модульных, функциональных и браузерных тестов
- Использовать API ресурсы и версионирование для создания надежных и сопровождаемых API
- Реализовать правильную обработку ошибок и логирование с использованием обработчика исключений и фасада логирования Laravel
- Использовать функции валидации Laravel, включая Form Requests, для целостности данных
- Реализовать индексирование баз данных и использовать функции оптимизации запросов Laravel для повышения производительности
- Использовать Laravel Telescope для отладки и мониторинга производительности в разработке
- Использовать Filament для быстрой разработки панели администратора
- Реализовать надлежащие меры безопасности, включая защиту CSRF, предотвращение XSS и санитацию ввода
- Использовать всегда name когда используем route

## Архитектура кода

### Соглашения об именовании
- Использовать согласованные соглашения об именовании для папок, классов и файлов
- Следовать соглашениям Laravel: единственное число для моделей, множественное для контроллеров (например, User.php, UsersController.php)
- Использовать PascalCase для имен классов, camelCase для имен методов и snake_case для столбцов баз данных

### Дизайн контроллеров
- Контроллеры должны быть final-классами для предотвращения наследования
- Делать контроллеры только для чтения (т.е. без изменения свойств)
- Избегать внедрения зависимостей непосредственно в контроллеры. Вместо этого использовать инъекцию методов или сервисные классы

### Дизайн моделей
- Модели должны быть final-классами для обеспечения целостности данных и предотвращения непредвиденного поведения от наследования

### Сервисы
- Создать папку Services в директории app
- Организовать сервисы в специальные для моделей сервисы и другие необходимые сервисы
- Сервисные классы должны быть final и только для чтения
- Использовать сервисы для сложной бизнес-логики, сохраняя контроллеры тонкими

### Маршрутизация
- Поддерживать согласованные и организованные маршруты
- Создавать отдельные файлы маршрутов для каждой основной модели или области функций
- Группировать связанные маршруты вместе (например, все маршруты, связанные с пользователем, в routes/user.php)

### Объявления типов
- Всегда использовать явные объявления типов возврата для методов и функций
- Использовать соответствующие подсказки типов PHP для параметров метода
- Использовать функции PHP 8.2+ такие как объединенные типы и обнуляемые типы при необходимости

### Согласованность типов данных
- Быть последовательным и явным с объявлениями типов данных во всем кодовой базе
- Использовать подсказки типов для свойств, параметров метода и типов возврата
- Использовать строгую типизацию PHP для раннего обнаружения ошибок, связанных с типами

### Обработка ошибок
- Использовать функции обработки исключений и логирования Laravel для обработки исключений
- Создавать пользовательские исключения при необходимости
- Использовать блоки try-catch для ожидаемых исключений
- Корректно обрабатывать исключения и возвращать соответствующие ответы

## Ключевые моменты
- Следовать архитектуре MVC Laravel для четкого разделения бизнес-логики, данных и слоев представления
- Реализовать валидацию запросов с использованием Form Requests для обеспечения безопасности и валидации входных данных
- Использовать встроенную систему аутентификации Laravel, включая Laravel Sanctum для управления API-токенами
- Обеспечить соответствие REST API стандартам Laravel, используя API Resources для структурированных и согласованных ответов
- Использовать планирование задач и слушателей событий для автоматизации повторяющихся задач и разделения логики
- Реализовать транзакции базы данных с использованием фасада базы данных Laravel для обеспечения согласованности данных
- Использовать Eloquent ORM для взаимодействия с базами данных, обеспечивающий отношения и оптимизацию запросов
- Реализовать версионирование API для поддержки и обратной совместимости
- Оптимизировать производительность с помощью механизмов кэширования, таких как Redis и Memcached
- Обеспечить надежную обработку ошибок и логирование с использованием обработчика исключений и функций логирования Laravel
- Работа осуществляется через Docker

## Структура проекта

У нас есть базовая структура для RESTful API которой мы должны придерживаться:

### Структура директорий
- `app/Http/Controllers/Api/V1` - контроллеры API версии 1
- `app/Http/Resources/Api/V1` - API ресурсы для трансформации данных
- `app/Http/Requests/Api/V1` - валидация запросов
- `app/Services` - бизнес-логика
- `app/Repositories` - работа с данными
- `app/Contracts` - интерфейсы
- `app/Traits` - повторно используемый код
- `app/Exceptions/Api` - обработка API исключений

### Базовые классы
- `ApiController` - базовый контроллер с методами ответов
- `RepositoryInterface` - интерфейс для репозиториев
- `BaseRepository` - базовый класс репозитория
- `ApiResponseTrait` - трейт для обработки ответов
- `ApiExceptionHandler` - обработчик исключений API
- `ApiRequest` - базовый класс для валидации запросов

### Обработка ошибок
- Единый формат ответов
- Обработка различных типов исключений
- Детальные сообщения об ошибках в режиме отладки
